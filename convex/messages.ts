// Message related queries and mutations

import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

const SHOW_COMMENTS = false; // Set to true to log messages (for debugging)

export const list = query({
    args: { 
        chatId: v.id("chats") 
    },
    handler: async (ctx, args) => {    
        const messages = await ctx.db
            .query("messages")
            .withIndex("by_chat_id", (q) => q.eq("chatId", args.chatId))
            .order("asc") // sort by createdAt
            .collect();

        if (SHOW_COMMENTS) {
            console.log("ğŸ“œ Retrieved messages:", {
                chatId: args.chatId,
                count: messages.length,
            });
        };

        return messages;
    },
});

// Update db with user message
export const send = mutation({
    args: {
        chatId: v.id("chats"),
        content: v.string(),
    },
    handler: async (ctx, args) => {
        if (SHOW_COMMENTS) {
                console.log("ğŸ“¤ Sending message:", {
                chatId: args.chatId,
                content: args.content,
            });
        };
        // Save the user message with preserved newlines
        const messageId = await ctx.db.insert("messages", {
            chatId: args.chatId,
            content: args.content.replace(/\n/g, "\\n"),
            role: "user",
            createdAt: Date.now(),
        });

        if (SHOW_COMMENTS) {
                console.log("âœ… Saved user message:", {
                messageId,
                chatId: args.chatId,
            });
        };

        return messageId;
    },
});

// Update db with assistant message
export const store = mutation({
    args: {
        chatId: v.id("chats"),
        content: v.string(),
        role: v.union(v.literal("user"), v.literal("assistant")),
    },
    handler: async (ctx, args) => {
        if (SHOW_COMMENTS) {
            console.log("ğŸ’¾ Storing message:", {
                chatId: args.chatId,
                role: args.role,
                contentLength: args.content.length,
            });
        };

        // Store message with preserved newlines and HTML
        const messageId = await ctx.db.insert("messages", {
            chatId: args.chatId,
            content: args.content
            .replace(/\n/g, "\\n")
            // Don't escape HTML - trust the content since it's generated by the system
            .replace(/\\/g, "\\\\"), // Only escape backslashes
            role: args.role,
            createdAt: Date.now(),
        });

        if (SHOW_COMMENTS) {
            console.log("âœ… Stored message:", {
                messageId,
                chatId: args.chatId,
                role: args.role,
            });
        };

        return messageId;
    },
});

// Get last message from chat
export const getLastMessage = query({
    args: { chatId: v.id("chats") },
    handler: async (ctx, args) => {
        // Check if user is authenticated
        const identity = await ctx.auth.getUserIdentity();
        if (!identity) {
            throw new Error("Unauthenticated");
        };
        // Check if user owns the chat
        const chat = await ctx.db.get(args.chatId);
        if (!chat || chat.userId !== identity.subject) {
            throw new Error("Unauthorized");
        };
        // Get last message from the chat
        const lastMessage = await ctx.db
            .query("messages")
            .withIndex("by_chat_id", (q) => q.eq("chatId", args.chatId))
            .order("desc") // sort by createdAt
            .first(); // get the last message sent

        return lastMessage;
    },
});